/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : MIDI
 #	author : miyako
 #	2016/03/21
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark -

namespace MIDI
{
	NSBundle *pluginBundle = nil;
	std::map<int, NSTask*> tasks;
	
	void taskDeleteAll()
	{
		std::map<int, NSTask*>::iterator pos = MIDI::tasks.begin();
		while (pos != MIDI::tasks.end())
		{
			NSTask *task = pos->second;
			
			if([task isRunning])
				[task terminate];
			
			[task release];
			
			MIDI::tasks.erase(pos);

       ++pos;
		}
	}
	
	NSTask *taskGet(C_LONGINT &index)
	{
		NSTask *task = NULL;
		std::map<int, NSTask*>::iterator pos = MIDI::tasks.find(index.getIntValue());
		if(pos != MIDI::tasks.end())
		{
			task = pos->second;
		}
		return task;
	}
	
	NSTask * taskCreate()
	{
		NSTask *task = [[NSTask alloc]init];
		MIDI::tasks.insert(std::map<int, NSTask*>::value_type([task processIdentifier], task));
		return task;
	}
	
	void taskDelete(C_LONGINT &index)
	{
		NSTask *task = NULL;
		std::map<int, NSTask*>::iterator pos = MIDI::tasks.find(index.getIntValue());
		if(pos != MIDI::tasks.end())
		{
			task = pos->second;
			
			if([task isRunning])
				[task terminate];
			
			[task release];
			
			MIDI::tasks.erase(pos);
		}
	}
}

bool IsProcessOnExit()
{
    C_TEXT name;
    PA_long32 state, time;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
    CUTF16String procName(name.getUTF16StringPtr());
    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
    return (!procName.compare(exitProcName));
}

void OnStartup()
{
	MIDI::pluginBundle = [NSBundle bundleWithIdentifier:@"com.4D.4DPlugin.midi"];
}

void OnCloseProcess()
{
    if(IsProcessOnExit())
		{
			MIDI::taskDeleteAll();
    }
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
        case kInitPlugin :
        case kServerInitPlugin :            
            OnStartup();
            break;    

        case kCloseProcess :            
            OnCloseProcess();
            break;
			
// --- MIDI

		case 1 :
			MIDI_Play(pResult, pParams);
			break;

		case 2 :
			MIDI_ABORT(pResult, pParams);
			break;

		case 3 :
			MIDI_SUSPEND(pResult, pParams);
			break;

		case 4 :
			MIDI_RESUME(pResult, pParams);
			break;

	}
}

// ------------------------------------- MIDI -------------------------------------


void MIDI_Play(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	if(MIDI::pluginBundle)
	{
			NSURL *bundleURL = [MIDI::pluginBundle bundleURL];
			NSString *configPath = [[[[[bundleURL
			URLByAppendingPathComponent:@"Contents"]
			URLByAppendingPathComponent:@"Resources"]
			URLByAppendingPathComponent:@"timidity"]
			URLByAppendingPathComponent:@"timidity.cfg"]path];

			NSString *launchPath = [[[[bundleURL
			URLByAppendingPathComponent:@"Contents"]
			URLByAppendingPathComponent:@"MacOS"]
			URLByAppendingPathComponent:@"timidity"]path];

			NSString *path = Param1.copyPath();

			NSArray *arguments = [NSArray arrayWithObjects:@"-c", configPath, path, nil];
		
			NSTask *task = MIDI::taskCreate();
		
			[task setArguments: arguments];
			[task setLaunchPath:launchPath];
			[task launch];
	}

	returnValue.setReturn(pResult);
}

void MIDI_ABORT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	MIDI::taskDelete(Param1);

}

void MIDI_SUSPEND(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSTask *task = MIDI::taskGet(Param1);
	
	if(task)
	{
		[task suspend];
	}

}

void MIDI_RESUME(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSTask *task = MIDI::taskGet(Param1);
	
	if(task)
	{
		[task resume];			
	}

}

